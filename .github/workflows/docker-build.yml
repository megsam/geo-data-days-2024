name: Docker Compose CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      GEOSERVER_ADMIN_USER: ${{ secrets.GEOSERVER_ADMIN_USER }}
      GEOSERVER_ADMIN_PASSWORD: ${{ secrets.GEOSERVER_ADMIN_PASSWORD }}
      NGINX_HOST: foobar.com
      NGINX_PORT: 80

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Images
        run: |
          docker build -t megsam/geo-data-days-2024:geodatadays2024-postgis -f Dockerfile.postgis .
          docker build -t megsam/geo-data-days-2024:geodatadays2024-geoserver -f Dockerfile.geoserver .
          docker build -t megsam/geo-data-days-2024:geodatadays2024-nginx -f Dockerfile.nginx .

      - name: Build and Start Docker Compose Services
        run: docker compose -f docker-compose-postgis-geoserver.yml up -d --build

      - name: Wait for PostGIS to be ready
        run: |
          echo "Waiting for PostGIS to be ready..."
          for i in {1..30}; do
            if docker compose -f docker-compose-postgis-geoserver.yml exec -T postgis pg_isready -U ${POSTGRES_USER}; then
              echo "PostGIS is ready!"
              break
            else
              echo "Waiting for PostGIS..."
              sleep 10
            fi
          done

      - name: Wait for GeoServer to be ready
        run: |
          echo "Waiting for GeoServer to be ready..."
          for i in {1..30}; do
            if curl -s --head --request GET http://localhost:8080/geoserver/web/?page=login | grep "200 OK"; then
              echo "GeoServer is ready!"
              break
            else
              echo "Waiting for GeoServer..."
              sleep 5
            fi
          done

      - name: Validate Nginx Application
        run: |
          echo "Checking if Nginx is serving the application..."
          if curl -s --head --request GET http://localhost:8081/ | grep "200 OK"; then
            echo "Nginx application is serving content!"
          else
            echo "Nginx application is not serving content!"
            exit 1
          fi

      - name: Run curl test for GeoServer
        run: |
          curl -f 'http://localhost:8080/geoserver/espace/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=espace%3ABretelles&maxFeatures=50&outputFormat=application%2Fjson'

      - name: Shut down services
        run: docker compose -f docker-compose-postgis-geoserver.yml down

      - name: Push Docker Images to Docker Hub
        run: |
          docker push megsam/geo-data-days-2024:geodatadays2024-postgis
          docker push megsam/geo-data-days-2024:geodatadays2024-geoserver
          docker push megsam/geo-data-days-2024:geodatadays2024-nginx